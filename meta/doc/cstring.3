.TH cstring 3
.SH NAME
.Nm cstring
.Nd A string ADT
.SH SYNOPSIS
.Fd #include <cstring.h>
.Fo "const char* c_str"
.Fa "cstring s"
.Fc
.Fo "int cstring_charcat"
.Fa "cstring dest"
.Fa "int c"
.Fc
.Fo "int cstring_concat"
.Fa "cstring dest"
.Fa "const char* src"
.Fc
.Fo "int cstring_concat2"
.Fa "cstring dest"
.Fa "const char* src1"
.Fa "const char* src2"
.Fc
.Fo "int cstring_concat3"
.Fa "cstring dest"
.Fa "const char* src1"
.Fa "const char* src2"
.Fa "const char* src3"
.Fc
.Fo "int cstring_set"
.Fa "cstring dest"
.Fa "const char* src"
.Fc
.Fo "int cstring_nset"
.Fa "cstring dest"
.Fa "const char* src"
.Fa "size_t n"
.Fc
.Fo "int cstring_extend"
.Fa "cstring s"
.Fa "size_t size"
.Fc
.Fo "cstring cstring_left"
.Fa "cstring src"
.Fa "size_t n"
.Fc
.Fo "cstring cstring_right"
.Fa "cstring src"
.Fa "size_t n"
.Fc
.Fo "size_t cstring_length"
.Fa "cstring s"
.Fc
.Fo "cstring cstring_new"
.Fc
.Fo "int cstring_multinew"
.Fa "cstring *pstr"
.Fa "size_t nelem"
.Fc
.Fo "void cstring_free"
.Fa "cstring s"
.Fc
.Fo "int cstring_pcat"
.Fa "cstring dest"
.Fa "const char *start"
.Fa "const char *end"
.Fc
.Fo "int cstring_printf"
.Fa "cstring dest"
.Fa "size_t needs_max"
.Fa "const char* fmt"
.Fa "..."
.Fc
.Fo "int cstring_vprintf"
.Fa "cstring dest"
.Fa "size_t needs_max"
.Fa "const char* fmt"
.Fa "va_list ap"
.Fc
.Fo "void cstring_recycle"
.Fa "cstring s"
.Fc
.Fo "void cstring_reverse"
.Fa "cstring s"
.Fc
.Fo "void cstring_strip"
.Fa "cstring s"
.Fc
.Fo "void cstring_upper"
.Fa "cstring s"
.Fc
.Fo "void cstring_lower"
.Fa "cstring s"
.Fc
.Fo "cstring cstring_substring"
.Fa "cstring src"
.Fa "size_t from"
.Fa "size_t to"
.Fc
.SH DESCRIPTION
The goal of the cstring ADT is to create a better way of handling
strings than the standard C way. cstring is designed to be fast and
to be suitable in e.g. multithreaded (server) programs. 
.Pp
NOTES:
a) As we have no function overload in C, we use char*
instead of cstring* where needed(e.g. in strcat())
Some of the functions in cstring also allocate memory when
called. This allocation may fail, and the functions then return 0
or NULL to indicate out of memory.
.Pp
Memory handling in cstring:
All strings will initially have room for 256 bytes. One byte is 
reserved for the terminating zero. Whenever the memory area 
is excausted, the size is doubled. If doubling isn't sufficient,
then cstring will compute the exact value needed and use that 
value instead. The next time a string needs more space,
the computed value is doubled.
.Pp
This means that if you start out with an empty string of 256 bytes,
and then append a long string of e.g. 600 bytes, the string will use
601 bytes. If you then append a short string of e.g. 4 bytes,
cstring will double to 1201 bytes.
.Pp
Allocated memory will not be freed until cstring_free() is called.
.SH AUTHOR
.An B. Augestad, bjorn.augestad@gmail.com
