.TH cstring 3 2016-01-30 "" "The Meta C Library"
.SH NAME
cstring \- A string ADT

.SH SYNOPSIS
.B #include <cstring.h>
.sp
.BI "cstring cstring_new(void);

.BI "status_t cstring_multinew(cstring * " pstr ", size_t " nelem ");

.BI "void cstring_free(cstring " s ");

.BI "void cstring_recycle(cstring " s ");

.BI "const char *c_str(cstring " s ");

.BI "size_t cstring_length(cstring " s ");

.BI "status_t cstring_charcat(cstring " dest " , int " c ");

.BI "status_t cstring_concat(cstring " dest " , const char* " src ");

.BI "status_t cstring_concat2(cstring " dest " , const char* " src1 " , const char* " src2 ");

.BI "status_t cstring_concat3(cstring " dest " , const char* " src1 " , const char* " src2 " , const char* " src3 ");

.BI "status_t cstring_set(cstring " dest " , const char* " " src ");

.BI "status_t cstring_nset(cstring " dest " , const char* " src ", size_t " n ");

.BI "status_t cstring_extend(cstring " s ", size_t " size ");

.BI "cstring cstring_left(cstring " src ", size_t " n ");

.BI "cstring cstring_right(cstring " src ", size_t " n ");

.BI "status_t cstring_pcat(cstring " dest " , const char * " start " , const char * " end ");

.BI "status_t cstring_printf(cstring " dest ", size_t " needs_max " , const char* " fmt ", " ... ");

.BI "status_t cstring_vprintf(cstring " dest ", size_t " needs_max " , const char* " fmt ", va_list " ap ");

.BI "void cstring_reverse(cstring " s ");

.BI "void cstring_strip(cstring " s ");

.BI "void cstring_upper(cstring " s ");

.BI "void cstring_lower(cstring " s ");

.BI "cstring cstring_substring(cstring " src ", size_t " from ", size_t " to ");

.BI "int cstring_compare(cstring " s " , const char * " str ");

.BI "int cstring_casecompare(cstring " s " , const char * " str ");

.SH DESCRIPTION
The goal of the cstring ADT is to create a better way of handling
strings than the standard C way. cstring is designed to be fast and
to be suitable in e.g. multithreaded (server) programs. 
.PP
.SH NOTES:
a) As we have no function overload in C, we use char*
instead of cstring* where needed(e.g. in strcat())
Some of the functions in cstring also allocate memory when
called. This allocation may fail, and the functions then return 0
or NULL to indicate out of memory.
.PP
Memory handling in cstring:
All strings will initially have room for 256 bytes. One byte is 
reserved for the terminating zero. Whenever the memory area 
is excausted, the size is doubled. If doubling isn't sufficient,
then cstring will compute the exact value needed and use that 
value instead. The next time a string needs more space,
the computed value is doubled.
.PP
This means that if you start out with an empty string of 256 bytes,
and then append a long string of e.g. 600 bytes, the string will use
601 bytes. If you then append a short string of e.g. 4 bytes,
cstring will double to 1201 bytes.
.PP
Allocated memory will not be freed until cstring_free() is called.
