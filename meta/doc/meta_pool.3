.TH meta_pool 3 2016-01-30 "" "The Meta C Library"
.SH NAME
meta_pool \- Object management ADT
.SH SYNOPSIS
.B #include <meta_pool.h>
.sp
.BI "pool pool_new);

.BI "void pool_free(pool p, dtor cleanup);

.BI "void* pool_add(pool p, void *resource);

.BI "void* pool_get(pool p);

.BI "void* pool_recycle(pool p, void *resource);

.SH DESCRIPTION
A pool is just a pool of resources, which basically can
be anything. You create the pool by adding resources to it
and later you can get resources from the pool by calling
the function pool_get().
.PP
Now, why would anyone want to use a pool? The initial purpose
for the resource pool was to speed up things by precreating
a fixed number of resources and then use them later in a 
program. If the creation/destruction process is slow, then
you get overhead. We don't like that. 
.PP
Imagine a multithreaded server to which a client can connect.
The server may have an upper limit of clients, and each client
may use some connection specific struct or ADT. You can then
precreate these structs when the server starts and later just
get an ADT from the pool. 
.PP
The resource pool is thread safe and reentrant. It uses a mutex
to control access to the pool. 
.SH AUTHOR
.An B. Augestad, bjorn.augestad@gmail.com
