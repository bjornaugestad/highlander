.TH FIFO 7 2016-01-30 Meta Meta 
fifo \- A general purpose FIFO queue


.SH NAME
.Nm fifo
.Nd A FIFO implementation
.SH SYNOPSIS
.B #include <meta_fifo.h>
.BI "fifo fifo_new(size_t size);

.BI "void fifo_free(fifo p, dtor dtor_fn);

.BI "status_t fifo_lock(fifo p);

.BI "status_t fifo_unlock(fifo p);

.BI "status_t fifo_add(fifo p, void *data);

.BI "size_t fifo_nelem(fifo p);

.BI "size_t fifo_free_slot_count(fifo p);

.BI "void *fifo_get(fifo p);

.BI "void *fifo_peek(fifo p, size_t i);

.BI "status_t fifo_write_signal(fifo p, void *data);

.BI "status_t fifo_wait_cond(fifo p);

.BI "status_t fifo_wake(fifo p);

.BI "status_t fifo_signal(fifo p);


.SH DESCRIPTION
The fifo ADT implements a tradidional First In, First Out queue.
Using a fifo follows the same pattern as all other ADTs, create it,
use it, and then free it.
.PP
Any type of data stored in the FIFO, as long as one can convert it
to and from a void* pointer.
.PP
The FIFO is designed to be thread safe and to be used in combination
with POSIX condition variables. More correctly, the FIFO uses such
variables internally to let consumers of thread data wait for events,
typically new entries in the queue.
.PP
.SH SEE ALSO
.Xr wlock pthread_cond_wait
.Xr fifo_new fifo_free fifo_lock fifo_unlock fifo_add fifo_nelem
.Xr fifo_free_slot_count fifo_get fifo_peek
.Xr fifo_write_signal fifo_wait_cond fifo_wake fifo_signal


