.TH list_delete 3 2016-01-30 "" "The Meta C Library"
.SH NAME
.Nm list_delete() 
.Nd Delete a node from a list.
.SH SYNOPSIS
.B #include <meta_list.h>
.Fo "list_iterator list_delete"
.Fa "list lst"
.Fa "list_iterator i"
.Fa "dtor dtor"
.Fc
.SH DESCRIPTION
.Nm
deletes the node indexed by the 
.Fa i
iterator from the list. If  the optional 
.Fa dtor
function pointer is NULL, then 
.Nm
will call free() to free the memory used by the node. This works well for node data allocated with 
malloc() or calloc(), but fails miserably if the node points to static data or the node data
itself contains pointers to allocated memory. In such a case the program will leak memory.
.SH RETURN VALUE
.Nm
returns a list_iterator which will point to the first node after the deleted node, or to the
end of the list if the deleted node was the last node in the list.
.SH EXAMPLE
.Bd -literal
/* The object stored in the list */
struct foo { char *name; };
/* Create an object */
struct foo *p = malloc(sizeof *p);
p->name = malloc(100);
strcpy(p->name, "Hello, world");
/* Destructor for the object */
void my_dtor(void *pfoo)
{
   struct foo *p = pfoo;
   free(p->name);
   free(p);
}
/* Delete one object */
list_iterator i = list_find(lst, "Hello, world", my_compare);
if(!list_end(i))
    list_delete(lst, &i, my_dtor);
.Ed
.SH AUTHOR
B. Augestad, bjorn.augestad@gmail.com.
