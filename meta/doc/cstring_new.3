.TH cstring_new 3 2016-01-30 "" "The Meta C Library"
.SH NAME
.Nm cstring_new()
.Nm cstring_multinew()
.Nm cstring_dup()
.Nm cstring_free()
.Nd Create and destroy cstrings
.SH SYNOPSIS
.B #include <cstring.h>
.sp
.BI "cstring cstring_new" .Fa void

.BI "status_t cstring_multinew(cstring *pstr, size_t nelem);

.BI "cstring cstring_dup(const char *src);

.BI "cstring cstring_copy(const cstring src);

.BI "void cstring_free(cstring s);

.SH DESCRIPTION
.Nm cstring_new()
creates a new cstring.  The string will initially have room for
255 characters plus the always present string terminator ('\\0').
.PP
.Nm cstring_multinew()
creates multiple new cstrings.
This function is a bit experimental and the intention is to 
reduce the number of tests in functions that allocates more than one cstring. 
The array is used only to store pointers when making the function call.
.PP
.Nm cstring_dup()
creates a cstring from a string literal.
.Nm cstring_free()
frees all memory used by the string, including the cstring itself.
The string cannot be used after a call to cstring_free. 
.SH RETURN VALUE
.Nm cstring_new()
returns a pointer to the new cstring, or NULL if an error occured.
.PP
.Nm cstring_multinew()
returns 1 if all the strings were created or 0 if an error occured.
.PP
.Nm cstring_copy() creates a deep copy of a cstring object.
.SH EXAMPLE
.in +4n
.nf
cstring s, s1, s2, s3;
cstring arr[3];
if( (s = cstring_new()) != NULL)
...
cstring_free(s);
if(cstring_multinew(arr, 3)) {
    s1 = arr[0];
    s2 = arr[1];
    s3 = arr[2];
}
else
    perror("no mem");
...
cstring_free(s1);
cstring_free(s2);
cstring_free(s3);
...
s = cstring_dup("Hello, World");
s1 = cstring_copy(s);
cstring_free(s);
cstring_free(s1);

.nf
.in
