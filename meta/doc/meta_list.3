.TH meta_list 7 2016-01-30 "" "The Meta C Library"
.SH NAME
meta_list \- General purpose list ADT.
.SH SYNOPSIS
.B #include <meta_list.h>
.sp
.BI "list list_add(list lst, void* data);

.BI "list list_copy(list lst, void*(*copyfn)(const void*), dtor dtor);

.BI "size_t list_count(list lst, int (*include_node)(void*));

.BI "list_iterator list_delete(list lst, list_iterator i, dtor dtor);

.BI "int list_end(list_iterator li);

.BI "list_iterator list_find(list lst, const void *data, int(*compar)(const void*, const void*));

.BI "list_iterator list_first(list lst);

.BI "int list_foreach(list lst, void* args, listfunc f);

.BI "int list_foreach_reversed(list lst, void* arg, listfunc f);

.BI "int list_foreach_sep(list lst, void* arg, listfunc f, int(*sep)(void*arg));

.BI "int list_dual_foreach(list lst, void *arg1, void *arg2, int(*dual)(void* a1, void *a2, void *data));

.BI "void* list_get(list_iterator i);

.BI "void* list_get_item(list lst, size_t index);

.BI "list list_insert(list lst, void *data);

.BI "int list_last(list_iterator li);

.BI "list list_merge(list dest, list src);

.BI "list list_new(void);

.BI "void list_free(list lst, dtor dtor);

.BI "list_iterator list_next(list_iterator i);

.BI "list_iterator list_remove_node(list lst, list_iterator i);

.BI "size_t list_size(list lst);

.BI "void list_sort(list lst, int(*compar)(const void *p1, const void *p2));

.BI "list sublist_adaptor(list lst, void* (*adaptor)(void*));

.BI "list sublist_copy(list lst);

.BI "list sublist_create(list lst, int (*include_node)(void*));

.BI "list sublist_create_neg(list lst, int (*include_node)(void*));

.BI "void sublist_free(list lst);

.SH DESCRIPTION
The 
.Nm meta_list
ADT(Abstract Data Type) implements a general purpose linked list. 
