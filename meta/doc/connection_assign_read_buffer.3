.TH connection_assign_read_buffer 3
.SH NAME
.Nm connection_assign_read_buffer()
.Nm connection_assign_write_buffer()
.Nm connection_reclaim_read_buffer()
.Nm connection_reclaim_write_buffer()
.Nd Manage connection buffers
.SH SYNOPSIS
.Fd #include <connection.h>
.Fo "membuf connection_reclaim_read_buffer"
.Fa "connection conn"
.Fc
.Fo "membuf connection_reclaim_write_buffer"
.Fa "connection conn"
.Fc
.Fo "void connection_assign_read_buffer"
.Fa "connection conn"
.Fa "membuf buf"
.Fc
.Fo "void connection_assign_write_buffer"
.Fa "connection conn"
.Fa "membuf buf"
.Fc
.SH DESCRIPTION
The connection is assigned a read buffer and a write buffer on demand,
instead of managing the buffers itself. The reason is that we may
have a huge queue of unserved connections and a rather low number of
worker threads. The connection does not need the buffers until the
worker thread starts to service the connection, but the connection object
itself is stored in the queue. 
.Pp
You do not have to worry about this if you use tcp_server ADT,
as it assigns and reclaims buffers automatically. 
.SH AUTHOR
.An B. Augestad, bjorn.augestad@gmail.com
