.TH array_new 3 2016-01-30 "" "The Meta C Library"
.SH NAME
array_new() array_free() \- Create and destroy dynamic arrays

.SH SYNOPSIS
.B #include <meta_array.h>
.sp
.BI "array array_new(size_t " nmemb ", int " can_grow ");

.BI "void array_free(array " p ", dtor " cleanup ");

.SH DESCRIPTION
.BR array_new()
creates a new array. If can_grow is <> 0, then the array
is allowed to grow automatically. 
.PP
.BR array_free()
frees the array.
.PP
If the cleanup function parameter is NULL, the entries in the array will not be freed by 
.BR array_free().
This makes it possible to add entries in the array which cannot be freed,
e.g., text literals. If the destructor always called a free function for
the entries in the array, then one couldn't add such objects.


.SH EXAMPLE
.in
.nf
#include <stdlib.h>
#include <stdio.h>
#include <meta_array.h>

int main(void)
{
    array a;
    size_t i, n = 10;
    char *s;
    
    // Store integers in array
    a = array_new(10, 0);
    for (i = 0; i < n; i++)
        array_add(a, (void *)i);

    for (i = 0; i < n; i++) {
        size_t val = (size_t)array_get(a, i);
        printf("Value for %zu: %zu\n", i, val);
    }

    // No dtor function since entries don't point to alloc'ed mem.
    array_free(a, 0);

    // Store strings in array.
    a = array_new(10, 0);
    for (i = 0; i < n; i++) {
        s = malloc(20);

        sprintf(s, "%zu", i);
        array_add(a, s);
    }

    for (i = 0; i < n; i++) {
        s = array_get(a, i);
        printf("Value for %zu: %s\n", i, s);
    }

    // Use free() to free allocated mem.
    array_free(a, free);
    return 0;
}
.nf
.in
