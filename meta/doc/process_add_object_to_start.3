.TH process_add_object_to_start 3 2016-01-30 "" "The Meta C Library"
.SH NAME
process_add_object_to_start() \- Add an object to start when process_start() is called
.SH SYNOPSIS
.B #include <meta_process.h>
.sp
.BI "int process_add_object_to_start(process p, void *object, int do_func(void *), int undo_func(void *), int run_func(void *), int shutdown_func(void *));

.SH DESCRIPTION
The process object can start any number of threads. Use this function to 
add a function to run as a separate thread.
.Fa object
is used as argument to all the function pointers.
.PP
.Fa do_func
is called in phase one of process startup, before we change user id.
.Fa do_func
must therefore perform all operations needed to be done as user root,
e.g. bind sockets to reserverd ports.
.PP
.Fa undo_func()
is called if one of the 
.Fa do_func()
functions fails, but is not called for the object that failed.
.PP
.Fa run_func()
is called from process_start() after the process has changed rootdir directory and user id. 
.PP
.Fa shutdown_func()
will be called when the process receives SIGTERM.
.PP
All functions must return 1 on success and and 0 on error.
.SH RETURN VALUE
.Nm
returns 1 if the object was successfully added and 0 if an error occured.
.SH EXAMPLE
This very simple example creates a myserver and starts it properly, as well
as handles shutdown and signaling. 
Remember that you can add any number of objects to the process object.
.in +4n
.nf
.B #include <stdlib.h>
.sp
.B #include <meta_process.h>
.sp
/* Some object which contains thread specific data */
struct myserver {
	int shutting_down;
	...;
};
/* Do stuff as root, if needed. Typical actions would 
 * be to bind() to reserved ports
 */
int myserver_do(void* arg)
{
	struct myserver* p = arg;
	return 1;
}
/* Undo what myserver_do() did, e.g. close the socket
 * that myserver_do() bound to a port. 
 */
int myserver_undo(void* arg)
{
	struct myserver* p = arg;
	return 1;
}
/* Do the actual task of my server, until we're shutting down. */
int myserver_run(void* arg)
{
	struct myserver* p = arg;
	while(!p->shutting_down) {
		/* Perform the server task(s) */
	}
	/* Cleanup */
	return 1;
}
int myserver_shutting_down(void* arg)
{
	struct myserver* p = arg;
	p->shutting_down = 1;
	return 1;
}
int main(void)
{
	struct myserver* mys;
	process p;
	mys = malloc(sizeof *mys);
	p = process_new();
	process_add_object_to_start(
		p, 
		mys, 
		mys_do,
		mys_undo,
		mys_run,
		mys_shutting_down);
	process_set_username(p, "nobody");
	process_start(p, 1);
	process_wait_for_shutdown(p);
	free(mys);
	process_free(p);
	return 0;
}
.nf
.in
.SH SEE ALSO
.Xr process_start
