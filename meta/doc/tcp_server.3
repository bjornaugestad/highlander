.TH tcp_server 3 2016-01-30 "" "The Meta C Library"
.SH NAME
tcp_server \- General purpose TCP/IP server ADT
.SH SYNOPSIS
.B #include <tcp_server.h>
.sp
.BI "int tcp_server_allow_clients(tcp_server srv, const char *filter);

.BI "void tcp_server_clear_client_filter(tcp_server srv);

.BI "int tcp_server_free_root_resources(tcp_server s);

.BI "int tcp_server_get_root_resources(tcp_server srv);

.BI "int tcp_server_init(tcp_server srv);

.BI "tcp_server tcp_server_new(void);

.BI "void tcp_server_free(tcp_server srv);

.BI "void tcp_server_set_block_when_full(tcp_server srv, int block);

.BI "int tcp_server_set_hostname(tcp_server srv, const char *host);

.BI "void tcp_server_set_port(tcp_server srv, int port);

.BI "void tcp_server_set_queue_size(tcp_server srv, size_t size);

.BI "void tcp_server_set_readbuf_size(tcp_server s, size_t size);

.BI "void tcp_server_set_retries(tcp_server srv, int reads, int writes);

.BI "void tcp_server_set_service_function(tcp_server srv, void* (*func)(void*), void* arg);

.BI "void tcp_server_set_timeout(tcp_server srv, int reads, int writes, int accepts);

.BI "void tcp_server_set_worker_threads(tcp_server srv, size_t count);

.BI "void tcp_server_set_writebuf_size(tcp_server s, size_t size);

.BI "int tcp_server_shutdown(tcp_server srv);

.BI "int tcp_server_shutting_down(tcp_server srv);

.BI "int tcp_server_start(tcp_server srv);

.BI "int tcp_server_start_via_process(process p, tcp_server s);

.SH DESCRIPTION
The tcp_server ADT is a general purpose TCP/IP based server framework
which can be used to serve most types of servers. It implements the
necessary TCP/IP stuff needed to act as a server and uses a pool of
worker threads to serve incoming connection requests.
.PP
All we need to do to build a server based on the tcp_server ADT is to
provide callback functions that processes the application level protocol
used. See man pages for 
.Nm tcp_server_start_via_process()
or
.Nm tcp_server_set_service_func()
for an example of how to use a tcp_server object to build a server.
.PP
The tcp_server creates a work queue (FIFO) and several worker threads.
When a TCP/IP connection request is accepted, a connection object
is placed in the work queue by the main thread in the tcp_server. One
of the worker threads reads the work queue and calls the 
user supplied service function for the tcp_server.
That service function implements the higher level protocol and 
functionality the server implements.
