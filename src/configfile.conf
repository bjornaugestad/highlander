# NOTE: This is a copy of the file hws/highlander.conf, which will
# be used to verify/check the file configfile.c. 
#

quotedstring "this is a quoted string"

# documentroot. Tell the web server where to look for documents.
# The document root will be used as a prefix when the web server tries
# to locate files to send to the server. The default value  is ./, which
# means that the current directory is the documentroot. Change it to
# anything you like, but remember that the web server needs read permissions
# in the directory and that the directory must be accessible even after
# a chroot. See rootdir for more details.
documentroot /tmp/hws/doc

# Number of worker threads. Each server has 1..n worker threads, the 
# default is 8 threads. Each thread serves one connection, to the number
# of threads can be higher than the number of CPU's since each connection
# most likely is IO bound. Feel free to experiment, but remember that 
# values like 10000 are meaningless and the server process will probably
# not even start.
workers	8

# Queue size. Each server has a work queue and new connections are placed
# in that queue. The worker threads reads from the same queue and removes
# entries from the queue. This parameter decides the size of the queue.
queuesize 100

# If lots of connections are made at the same time, then the worker threads
# may not be able to serve the connections fast enough. The result is that
# the work queue will become full, and the server will not be able to add
# more work to the queue. We can then either block or just close the 
# connection. 
block_when_full 1

# username. The Highlander can run as a specific user and you choose 
# which user it should run as here. This parameter is only meaningful
# if you start the server as root, since other users cannot call setuid().
# The parameter will be ignored unless the server is started as root.
username nobody


# rootdir. You can change the root directory for the Highlander process so that
# if security is breached, the cracker has less chance of breaking in to 
# your system. See also chroot(2) for more details on how to utilize this
# functionality. rootdir is only meaningful if the server is started as
# root, since only the root user can call chroot().
rootdir /var/run/hws


# port. The web server listens to connections on a TCP/IP port number.
# TCP/IP reserves ports below 1024 to root, which means that if you want
# to have the server listen to port 80, the process must be started by
# the root user. That is both dangerous and awkward when you develop your
# server, so set the server to listen to a port above 1024. The default
# port number is 2000, but any port number will do.
port 2000

# hostname. Some machines have multiple interfaces, and you can choose
# which interface the server shall bind to. The default is all interfaces.
# localhost is a valid hostname on most machines, and is also a safe
# interface to bind to. It does make testing a bit awkward since you then
# cannot connect from other hosts. 
# hostname localhost

# logfile. All requests will be logged to this file. If you don't have a
# logfile, then logging will be disabled. The log file will be opened
# before the http server is started, so it should be OK to have a log file
# outside the root directory in case you use the rootdir directive.
# Note that logging is slow since it involves writing to disk. 
#logfile ./hws.log

# logrotate. If you want to keep the server up for 24/7 and have lots of
# traffic, then your logfiles will get rather big. You can therefore
# choose to rotate the logs after a certain number of entries. 
# The web server will close the original logfile and rename it by appending
# the current date and time to the filename specified by the logfile 
# parameter. Then the server will open a new logfile  and start writing
# to the new file. It is therefore important to remember that if
# you use the rootdir directive and the server does a chroot() and setuid(),
# logrotate must still have write access to the logfile directory.
# Note that the name of the archived file will be $logfile.YYYYMMDDHHMMSS
# This means that if you rotate more often than each second, you will lose
# entries since you rotate more than once per second. 
logrotate 1000000

# timeouts. The web server reads from sockets, which can timeout if
# the client sends us data too slowly. The default timeout is 15 seconds,
# but most values go. Note that the server will retry to read several times,
# so you must multiply the timeout with the number of retries, which is
# by default 3.
timeout_read	5
timeout_write	5
retries_read	0
retries_write	0

# Accept is a bit different, since it does not read data from a socket,
# the accept() function call just waits for connection requests. We still
# want to be able to tune it, since the timeout value is important when
# you want to shut down the web server. 
timeout_accept	5

